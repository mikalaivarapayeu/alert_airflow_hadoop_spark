version: '3.8'
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.7.2}
  build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__CORE__SQL_ALCHEMY_CONN}
    AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}
    AIRFLOW__CELERY__BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}
    AIRFLOW__CORE__FERNET_KEY: '${AIRFLOW__CORE__FERNET_KEY}'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: '${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}'
    AIRFLOW__CORE__LOAD_EXAMPLES: '${AIRFLOW__CORE__LOAD_EXAMPLES}'
    AIRFLOW__API__AUTH_BACKENDS: ${AIRFLOW__API__AUTH_BACKENDS}
    AIRFLOW__SMTP__SMTP_HOST: ${AIRFLOW__SMTP__SMTP_HOST}
    AIRFLOW__SMTP__SMTP_STARTTL: ${AIRFLOW__SMTP__SMTP_STARTTL}
    AIRFLOW__SMTP__SMTP_SSL: ${AIRFLOW__SMTP__SMTP_SSL}
    AIRFLOW__SMTP__SMTP_USER: ${AIRFLOW__SMTP__SMTP_USER}
    AIRFLOW__SMTP__SMTP_PASSWORD: ${AIRFLOW__SMTP__SMTP_PASSWORD}
    AIRFLOW__SMTP__SMTP_PORT: ${AIRFLOW__SMTP__SMTP_PORT}
    AIRFLOW__SMTP__SMTP_MAIL_FROM: ${AIRFLOW__SMTP__SMTP_MAIL_FROM}
    AIRFLOW_CONN_ERROR_FOLDER: '${AIRFLOW_CONN_ERROR_FOLDER}'
    AIRFLOW_CONN_SPARK_CONN: '${AIRFLOW_CONN_SPARK_CONN}'
    AIRFLOW_VAR_EMAIL_DEST: '${AIRFLOW_VAR_EMAIL_DEST}'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: ${AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK}
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
#    - ${AIRFLOW_PROJ_DIR:-.}/hadoop/:/opt/airflow/hadoop.env
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/:/opt

  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
services:
    redis:
        image: 'redis:7.2.2'
        expose:
          - 6379
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            interval: 10s
            timeout: 30s
            retries: 2
            start_period: 30s
        restart: always
        # command: redis-server --requirepass redispass

    postgres:
      image: postgres:13
      environment:
        POSTGRES_USER: airflow
        POSTGRES_PASSWORD: airflow
        POSTGRES_DB: airflow
#      volumes:
#        - postgres-db-volume:/var/lib/postgresql/data
      healthcheck:
        test: [ "CMD", "pg_isready", "-U", "airflow" ]
        interval: 10s
        retries: 2
        start_period: 5s
      restart: always

    webserver:
        <<: *airflow-common
        command: webserver
        ports:
            - "8080:8080"
        restart: always
        healthcheck:
            test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
            interval: 30s
            timeout: 30s
            retries: 2
        depends_on:
          <<: *airflow-common-depends-on
          airflow-init:
            condition: service_completed_successfully

    scheduler:
        <<: *airflow-common
        restart: always
        command: scheduler
        depends_on:
           <<: *airflow-common-depends-on
           airflow-init:
            condition: service_completed_successfully
    worker:
      <<: *airflow-common
      restart: always
      command: celery worker
      environment:
        <<: *airflow-common-env
        # Required to handle warm shutdown of the celery workers properly
        # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
        DUMB_INIT_SETSID: "0"
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

    airflow-triggerer:
      <<: *airflow-common
      command: triggerer
      healthcheck:
        test: [ "CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"' ]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

    flower:
      <<: *airflow-common
      restart: always
      ports:
        - "5555:5555"
      command: celery flower
      healthcheck:
        test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      depends_on:
         <<: *airflow-common-depends-on
         airflow-init:
            condition: service_completed_successfully


    airflow-init:
      <<: *airflow-common
      entrypoint: /bin/bash
      # yamllint disable rule:line-length
      command:
        - -c
        - |
          function ver() {
            printf "%04d%04d%04d%04d" $${1//./ }
          }
          airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
          airflow_version_comparable=$$(ver $${airflow_version})
          min_airflow_version=2.2.0
          min_airflow_version_comparable=$$(ver $${min_airflow_version})
          if (( airflow_version_comparable < min_airflow_version_comparable )); then
            echo
            echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
            echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
            echo
            exit 1
          fi
          if [[ -z "${AIRFLOW_UID}" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
            echo "If you are on Linux, you SHOULD follow the instructions below to set "
            echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
            echo "For other operating systems you can get rid of the warning with manually created .env file:"
            echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
            echo
          fi
          one_meg=1048576
          mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
          cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
          disk_available=$$(df / | tail -1 | awk '{print $$4}')
          warning_resources="false"
          if (( mem_available < 4000 )) ; then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
            echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
            echo
            warning_resources="true"
          fi
          if (( cpus_available < 2 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
            echo "At least 2 CPUs recommended. You have $${cpus_available}"
            echo
            warning_resources="true"
          fi
          if (( disk_available < one_meg * 10 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
            echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
            echo
            warning_resources="true"
          fi
          if [[ $${warning_resources} == "true" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
            echo "Please follow the instructions to increase amount of resources available:"
            echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
            echo
          fi
          mkdir -p /sources/airflow/logs /sources/airflow/dags /sources/airflow/plugins
          chown -R "${AIRFLOW_UID}:0" /sources/airflow/{logs,dags,plugins}
          exec /entrypoint airflow version
      # yamllint enable rule:line-length
      environment:
        <<: *airflow-common-env
        _AIRFLOW_DB_MIGRATE: 'true'
        _AIRFLOW_WWW_USER_CREATE: 'true'
        _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
        _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
        _PIP_ADDITIONAL_REQUIREMENTS: ''
      user: "0:0"
      volumes:
        - ${AIRFLOW_PROJ_DIR:-.}:/sources

#    airflow-cli:
#      <<: *airflow-common
#      profiles:
#        - debug
#      environment:
#        <<: *airflow-common-env
#        CONNECTION_CHECK_MAX_COUNT: "0"
#      # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
#      command:
#        - bash
#        - -c
#        - airflow
#######################################################
# SPARK SERVICES
#######################################################
    spark:
      image: docker.io/bitnami/spark:3.5
      environment:
        - SPARK_MODE=master
#        - SPARK_RPC_AUTHENTICATION_ENABLED=${SPARK_RPC_AUTHENTICATION_ENABLED}
#        - SPARK_RPC_ENCRYPTION_ENABLED=${SPARK_RPC_ENCRYPTION_ENABLED}
#        - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=${SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED}
#        - SPARK_SSL_ENABLED=${SPARK_SSL_ENABLED}
#        - SPARK_USER=${SPARK_SSL_ENABLED}
      env_file:
        - ./spark/spark.env
      ports:
        - '8082:8080'
        - '8081:8081'
      hostname: spark
      volumes:
        - ./spark/app:/opt/spark_apps
        - ./mnt/:/opt/mnt
    spark-worker:
      image: docker.io/bitnami/spark:3.5
      environment:
        - SPARK_MODE=worker
#        - SPARK_MASTER_URL=${SPARK_MASTER_URL}
#        - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY}
#        - SPARK_WORKER_CORES=${SPARK_WORKER_CORES}
#        - SPARK_RPC_AUTHENTICATION_ENABLED=${SPARK_RPC_AUTHENTICATION_ENABLED}
#        - SPARK_RPC_ENCRYPTION_ENABLED=${SPARK_RPC_ENCRYPTION_ENABLED}
#        - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=${SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED}
#        - SPARK_SSL_ENABLED=${SPARK_SSL_ENABLED}
#        - SPARK_USER=${SPARK_SSL_ENABLED}
      env_file:
        - ./spark/spark.env
      volumes:
        - ./spark/app:/opt/spark_apps
        - ./mnt/:/opt/mnt

######################################################
# HADOOP SERVICES
######################################################

    namenode:
      image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
      container_name: namenode
      restart: always
      ports:
        - '9870:9870'
        - '9000:9000'
      volumes:
        - ./hadoop/hadoop_namenode:/hadoop/dfs/name
      environment:
        - CLUSTER_NAME=alert
      env_file:
        - ./hadoop/hadoop.env

    datanode:
      image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
      container_name: datanode
      restart: always
      volumes:
        - ./hadoop/hadoop_datanode:/hadoop/dfs/data
      environment:
        SERVICE_PRECONDITION: "namenode:9870"
      env_file:
        - ./hadoop/hadoop.env

    datanode-1:
      image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
      container_name: datanode1
      restart: always
      volumes:
        - ./hadoop/hadoop_datanode1:/hadoop/dfs/data
      environment:
        SERVICE_PRECONDITION: "namenode:9870"
      env_file:
        - ./hadoop/hadoop.env

    datanode-2:
      image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
      container_name: datanode2
      restart: always
      volumes:
        - ./hadoop/hadoop_datanode2:/hadoop/dfs/data
      environment:
        SERVICE_PRECONDITION: "namenode:9870"
      env_file:
        - ./hadoop/hadoop.env
